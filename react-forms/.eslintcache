[{"C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\StandardForm\\ValidationMsg.js":"1","C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\StandardForm\\StdFormFunctional.js":"2","C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\react-hook-form\\react-hook-form.js":"3","C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\App.js":"4","C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\StandardForm\\StdFormClass.js":"5","C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\index.js":"6","C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\formik-form\\FormikForm.js":"7"},{"size":300,"mtime":1606543548396,"results":"8","hashOfConfig":"9"},{"size":6739,"mtime":1606597048308,"results":"10","hashOfConfig":"9"},{"size":5449,"mtime":1606542501172,"results":"11","hashOfConfig":"9"},{"size":1194,"mtime":1606626111052,"results":"12","hashOfConfig":"9"},{"size":6583,"mtime":1606581397203,"results":"13","hashOfConfig":"9"},{"size":500,"mtime":1606279278716,"results":"14","hashOfConfig":"9"},{"size":5722,"mtime":1606631024890,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x17onh",{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\StandardForm\\ValidationMsg.js",[],"C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\StandardForm\\StdFormFunctional.js",["31","32"],"//StdForm using functional component\r\n\r\nimport {useState, useEffect} from 'react';\r\n\r\n//import ValidationMsg component\r\nimport ValidationMsg from './ValidationMsg';\r\n\r\nconst StdFormFunctional = () =>{\r\nconst [form, setForm] = useState({\r\n    username: \"\", usernameValid: false,\r\n    email:\"\", emailValid: false,\r\n    password: \"\", passwordValid: false,\r\n    repeatPassword: \"\", repeatPasswordValid: false,\r\n    formValid: false,\r\n    errMsg: {}\r\n});\r\n\r\nlet {username, usernameValid, email, emailValid, password, passwordValid, repeatPassword, repeatPasswordValid, formValid,errMsg} = form\r\n\r\n\r\n\r\n//Form validation\r\n\r\n// const formValidation = () =>{  \r\n//     // let formValid= true  \r\n//     if(!usernameValid ){\r\n//         // usernameValid && emailValid && passwordValid && repeatPasswordValid        \r\n//         formValid= false\r\n//         console.log(\"sorry, form is invalid\", formValid)\r\n//     }\r\n//     setForm({formValid:true})\r\n//     console.log(\"Checking form\", formValid)\r\n// }\r\n\r\nconst formValidation = () =>{\r\n    if(usernameValid && emailValid && passwordValid && repeatPasswordValid){\r\n        formValid= true\r\n    }\r\n    setForm({formValid})\r\n        console.log(\"form is validated\", formValid)\r\n}\r\n\r\n//===============================Input validation=====================================\r\n//username validation==================\r\n\r\n    const userValidation = () =>{     \r\n        const {username} = form   \r\n        let usernameValid= true\r\n        errMsg={...errMsg}\r\n        console.log(\"user==\",username)\r\n        if(username.length<6 || username.length>15){\r\n            usernameValid= false\r\n            errMsg.username = \"Username should have 6-15 character\"        \r\n        }   \r\n        setForm({usernameValid, errMsg})    \r\n        console.log(\"errmessage.username:\", errMsg)   \r\n    }\r\n\r\n\r\n//email validation=======================\r\nlet emailValidation\r\n\r\nuseEffect(()=>{\r\n    const emailValidation =()=>{\r\n        let {email, errMsg} = form    \r\n        let emailValid=true\r\n        errMsg={...errMsg}\r\n        if(!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){             \r\n            emailValid=false;    \r\n            errMsg.email=\"Invalid email format\"            \r\n        }\r\n        setForm({emailValid, errMsg})\r\n        console.log(\"errmessage.emailllllll=======>>:\", errMsg)  \r\n        console.log(\"email validityyyyy======>>:\", emailValid)  \r\n    }\r\n    return ()=>emailValidation()\r\n\r\n},[email])\r\n\r\n\r\n//password validation======================\r\n\r\nconst passwordValidation = () =>{ \r\n    // let {password, errMsg} = form   \r\n    let passwordValid= true\r\n    errMsg={...errMsg}\r\n\r\n    if(password.length < 8){\r\n        passwordValid= false\r\n        errMsg.password= \"Password should be atleast 8 characters long!\"\r\n        console.log(\"passwordfailed\", passwordValid)\r\n    }\r\n    console.log(\"errmessage.password\", errMsg)\r\n    setForm({passwordValid, errMsg})\r\n    // console.log(\"errmessage.password\", errMsg)\r\n}\r\n\r\n//repeat password Validation================\r\n\r\nconst repeatPasswordValidation = () =>{   \r\n    let repeatPasswordValid= true\r\n    errMsg={...errMsg}\r\n\r\n    if(repeatPassword!==password){\r\n        repeatPasswordValid=false\r\n        errMsg.repeatPassword= \"Sorry! Password doesn't match\"\r\n        console.log(\"passwordrepeatfailed\", repeatPasswordValid)       \r\n    }\r\n    \r\n    setForm({repeatPasswordValid, errMsg})\r\n    console.log(\"errmessage.repeatPassword\", errMsg)\r\n    console.log(\"errmessage.validity\", repeatPasswordValid)\r\n}\r\n    \r\n     //submitHandler\r\n     const submitHandler =(e)=>{\r\n         e.preventDefault()\r\n     }\r\n\r\n\r\n    //Reset function to reset the state to initial state================\r\n    const resetForm =(e)=>{\r\n        e.preventDefault()\r\n        setForm({\r\n            username: \"\", usernameValid: false,\r\n            email:\"\", emailValid: false,\r\n            password: \"\", passwordValid: false,\r\n            repeatPassword: \"\", repeatPasswordValid: false,\r\n            formValid: false,\r\n            errMsg: {}\r\n        })\r\n    }\r\n           \r\n    return(\r\n        <form>\r\n            {/* input for username===================================*/}\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Username</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"username\"  onChange={(e)=>setForm({ ...form, username: e.target.value},userValidation())} />\r\n               \r\n                <span><ValidationMsg valid={usernameValid} \r\n                // message={errMsg.username} \r\n                /></span>\r\n            </div>\r\n\r\n            {/* Input for email ========================================*/}\r\n            <div className=\"form-group\" >\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"email\"\r\n                onChange={(e)=>setForm({...form, email: e.target.value}, emailValidation)}  />\r\n                <span><ValidationMsg valid={emailValid} \r\n                message={errMsg.email}  \r\n                /></span>\r\n            </div>\r\n\r\n            {/* Input for Password ======================================*/}\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" className=\"form-control\" id=\"password\" \r\n                 onChange={(e)=>setForm({...form, password: e.target.value}, passwordValidation())}/>\r\n                <span><ValidationMsg valid={passwordValid} \r\n                // message={errMsg.password}  \r\n                /></span>\r\n            </div>\r\n\r\n            {/* Input for Repeat Password================================= */}\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"repeatPassword\">Repeat Password</label>\r\n                <input type=\"password\" className=\"form-control\" id=\"repeatPassword\" \r\n                 onChange={(e)=>setForm({...form, repeatPassword: e.target.value}, repeatPasswordValidation())} />\r\n                <span><ValidationMsg valid={repeatPasswordValid} \r\n                // message={errMsg.repeatPassword} \r\n                /></span>\r\n            </div>\r\n\r\n            {/* Submit and reset button ===================================*/}\r\n            <div>\r\n            <button className=\"btn btn-primary btn-sm\" type=\"submit\" onClick={(e)=>submitHandler()} >Submit</button>\r\n            <button className=\"btn btn-danger btn-sm mx-4 px-3\" type=\"submit\" onClick={(e)=>resetForm()}>Reset</button>\r\n            </div>\r\n\r\n            <p>Username:{username}</p>\r\n            <p>Email:{email}</p>\r\n            <p>Password:{password}</p>\r\n            <p>Confirm Password:{repeatPassword}</p>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default StdFormFunctional","C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\react-hook-form\\react-hook-form.js",[],"C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\App.js",[],"C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\StandardForm\\StdFormClass.js",[],"C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\index.js",[],"C:\\Users\\Minakshi\\Documents\\React-forms\\react-forms\\src\\formik-form\\FormikForm.js",[],{"ruleId":"33","severity":1,"message":"34","line":35,"column":7,"nodeType":"35","messageId":"36","endLine":35,"endColumn":21},{"ruleId":"37","severity":1,"message":"38","line":78,"column":3,"nodeType":"39","endLine":78,"endColumn":10,"suggestions":"40"},"no-unused-vars","'formValidation' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","ArrayExpression",["41"],{"desc":"42","fix":"43"},"Update the dependencies array to be: [email, form]",{"range":"44","text":"45"},[2428,2435],"[email, form]"]